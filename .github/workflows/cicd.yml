name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/gsls_management_system:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Set up SSH Access
      env:
        PRIVATE_SSH_KEY: ${{ secrets.PRIVATE_SSH_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$PRIVATE_SSH_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_IP }} > ~/.ssh/known_hosts

    - name: Ensure Docker is Installed
      run: |
        ssh -i ~/.ssh/id_rsa ay@${{ secrets.SERVER_IP }} '
          if ! command -v docker &> /dev/null
          then
            echo "Docker not found. Installing..."
            sudo apt update
            sudo apt install -y docker.io
            sudo usermod -aG docker $USER
            newgrp docker
          else
            echo "Docker is already installed."
          fi
        '

    - name: Deploy to Server
      run: |
        ssh -i ~/.ssh/id_rsa ay@${{ secrets.SERVER_IP }} "
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/gsls_management_system:latest &&
          (docker stop app || true) &&
          (docker rm app || true) &&
          docker run -d --name app \
            -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
            -e MYSQL_USER=${{ secrets.MYSQL_USER }} \
            -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
            -e MYSQL_HOST=${{ secrets.MYSQL_HOST }} \
            -e MYSQL_PORT=${{ secrets.MYSQL_PORT }} \
            -e DATABASE_URL='mysql://root:${{ secrets.MYSQL_PASSWORD }}@${{ secrets.MYSQL_HOST }}:${{ secrets.MYSQL_PORT }}/your_database_name' \
            -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/gsls_management_system:latest
        "

    - name: Ensure Nginx is Installed and Restart It (If Needed)
      run: |
        ssh -i ~/.ssh/id_rsa ay@${{ secrets.SERVER_IP }} "
          if ! command -v nginx &> /dev/null; then
            sudo apt update && sudo apt install -y nginx
          fi
          sudo systemctl is-active --quiet nginx || sudo systemctl restart nginx
        "

    - name: Install Certbot and Obtain SSL Certificate
      run: |
        ssh -i ~/.ssh/id_rsa ay@${{ secrets.SERVER_IP }} "
          sudo apt-get update &&
          sudo apt-get install -y certbot python3-certbot-nginx &&
          sudo certbot --nginx -d gslsportal.com -d www.gslsportal.com --non-interactive --agree-tos --email ayomideolalere374@gmail.com
        "

    - name: Reload Nginx to Apply SSL Certificate
      run: |
        ssh -i ~/.ssh/id_rsa ay@${{ secrets.SERVER_IP }} "sudo systemctl reload nginx"
