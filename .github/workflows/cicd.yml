name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  BuildandPush:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Flask app image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/gsls_management_system:latest
        file: Dockerfile

    - name: Build and push Nginx image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/nginx-custom:latest
        file: Dockerfile.nginx
        no-cache: true

  deploy:
    runs-on: ubuntu-latest
    needs: BuildandPush

    steps:
    - name: Stop and Remove Existing Containers
      run: |
        docker compose down || true
        docker rm -f $(docker ps -aq) || true
        docker volume rm $(docker volume ls -q) || true

    - name: Set up SSH Access
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PRIVATE_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_rsa

    - name: Deploy Application with Docker Compose
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -e  # Exit on error

          # Ensure application directory exists
          if [ ! -d "/home/${{ secrets.SSH_USER }}/app" ]; then
            git clone https://github.com/${{ github.repository }} /home/${{ secrets.SSH_USER }}/app
          fi

          cd /home/${{ secrets.SSH_USER }}/app
          git reset --hard  # Ensure clean state
          git pull origin main

          # Stop and remove existing containers
          docker compose down

          # Remove old unused images (frees space)
          docker image prune -af

          # Pull latest images
          docker compose pull --quiet  

          # Start new containers
          docker compose up -d --remove-orphans

          # Restart Nginx to apply new changes
          docker restart nginx || true

        EOF
