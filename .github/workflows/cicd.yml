name: Build and Push Docker Image

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ayocloudpro/gsls_management_system:latest

    - name: Deploy Docker container and configure Nginx
      env:
        PRIVATE_SSH_KEY: ${{ secrets.PRIVATE_SSH_KEY }}
      run: |
        echo "$PRIVATE_SSH_KEY" > key
        chmod 600 key
        ssh -o StrictHostKeyChecking=no -i key ay@gslsportal.com << 'EOF'
          # Update the package list
          sudo apt-get update

          # Install Docker
          sudo apt-get install -y docker.io

          # Start and enable Docker service
          sudo systemctl start docker
          sudo systemctl enable docker

          # Pull the latest Docker image
          docker pull ayocloudpro/gsls_management_system:latest

          # Stop and remove the existing container
          docker stop gsls_management_system || true
          docker rm gsls_management_system || true

          # Run the new container
          docker run -d -p 80:80 --restart=always --name gsls_management_system ayocloudpro/gsls_management_system:latest

          # Check if the container is running
          if ! docker ps --filter "name=gsls_management_system" | grep -q gsls_management_system; then
            echo "Container failed to start. Checking logs..."
            docker logs gsls_management_system
            docker inspect gsls_management_system --format='{{.State.ExitCode}}'
            exit 1
          fi

          # Install Nginx and Certbot on the host
          sudo apt-get install -y nginx certbot python3-certbot-nginx

          # Configure Nginx for reverse proxy
          sudo tee /etc/nginx/sites-available/default > /dev/null << 'NGINX_CONF'
          server {
              listen 80;
              server_name gslsportal.com www.gslsportal.com;

              location / {
                  proxy_pass http://127.0.0.1:8080;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          NGINX_CONF

          # Restart Nginx to apply changes
          sudo systemctl restart nginx

          # Obtain SSL certificate from Let's Encrypt
          sudo certbot --nginx -d gslsportal.com -d www.gslsportal.com --non-interactive --agree-tos --email ayomideolalere374@gmail.com

          # Reload Nginx to apply the SSL certificate
          sudo systemctl reload nginx
        EOF