name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/gsls_management_system:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Set up SSH Access
      env:
        PRIVATE_SSH_KEY: ${{ secrets.PRIVATE_SSH_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$PRIVATE_SSH_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        eval "$(ssh-agent -s)"  
        ssh-add ~/.ssh/id_rsa  
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Ensure Docker is Installed
      run: |
        ssh -i ~/.ssh/id_rsa ay@${{ secrets.SERVER_IP }} '
          if ! command -v docker &> /dev/null; then
            echo "Docker not found. Installing..."
            sudo apt update
            sudo apt install -y docker.io
            sudo systemctl enable --now docker
          else
            echo "Docker is already installed."
          fi
        '

    - name: Deploy to Server
      env:
        MYSQL_USER: ${{ secrets.MYSQL_USER }}
        MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      run: |
        ssh -o SendEnv=MYSQL_USER -o SendEnv=MYSQL_PASSWORD -o SendEnv=MYSQL_DATABASE -o SendEnv=MYSQL_ROOT_PASSWORD -o SendEnv=SECRET_KEY -o SendEnv=ADMIN_PASSWORD \
        ay@${{ secrets.SERVER_IP }} << 'EOF'
          # Pull the latest Docker image
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/gsls_management_system:latest

          # Start MySQL if it's not running
          if ! docker ps | grep -q mysql-container; then
            echo "Starting MySQL container..."
            docker run -d --name mysql-container \
              -e MYSQL_ROOT_PASSWORD="$MYSQL_ROOT_PASSWORD" \  # Fix for missing root password
              -e MYSQL_USER="$MYSQL_USER" \
              -e MYSQL_PASSWORD="$MYSQL_PASSWORD" \
              -e MYSQL_DATABASE="$MYSQL_DATABASE" \
              -p 3306:3306 \
              mysql
          else
            echo "MySQL is already running."
          fi

          # Stop and remove old Flask app container
          docker stop app || true
          docker rm app || true

          # Run the Flask app with the correct environment variables
          docker run -d --name app \
            --link mysql-container:mysql \
            -e SECRET_KEY="$SECRET_KEY" \
            -e ADMIN_PASSWORD="$ADMIN_PASSWORD" \  # Fix for missing admin password
            -e DATABASE_URL="mysql+pymysql://$MYSQL_USER:$MYSQL_PASSWORD@mysql:3306/$MYSQL_DATABASE" \
            -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/gsls_management_system:latest
        EOF
    
    - name: Ensure Nginx is Installed and Restart It (If Needed)
      run: |
        ssh -i ~/.ssh/id_rsa ay@${{ secrets.SERVER_IP }} "
          if ! command -v nginx &> /dev/null; then
            sudo apt update && sudo apt install -y nginx
          fi
          sudo systemctl is-active --quiet nginx || sudo systemctl restart nginx
        "

    - name: Install Certbot and Obtain SSL Certificate
      run: |
        ssh -i ~/.ssh/id_rsa ay@${{ secrets.SERVER_IP }} "
          sudo apt-get update &&
          sudo apt-get install -y certbot python3-certbot-nginx &&
          sudo certbot renew --quiet || sudo certbot --nginx -d gslsportal.com -d www.gslsportal.com --non-interactive --agree-tos --email your@email.com
        "

    - name: Reload Nginx to Apply SSL Certificate
      run: |
        ssh -i ~/.ssh/id_rsa ay@${{ secrets.SERVER_IP }} "sudo systemctl reload nginx"
