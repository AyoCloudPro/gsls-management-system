name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  BuildandPush:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/gsls_management_system:latest

  deploy:
    runs-on: ubuntu-latest
    needs: BuildandPush

    steps:
    - name: Stop and Remove Existing Containers
      run: |
        docker-compose down || true
        docker rm -f $(docker ps -aq) || true
        docker volume rm $(docker volume ls -q) || true

    - name: Set up SSH Access
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PRIVATE_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_rsa

    - name: Deploy Application with Docker Compose
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          # Ensure directory exists
          if [ ! -d "/home/${{ secrets.SSH_USER }}/app" ]; then
            git clone https://github.com/${{ github.repository }} /home/${{ secrets.SSH_USER }}/app
          fi

          cd /home/${{ secrets.SSH_USER }}/app
          git pull origin main

          # Ensure Docker is installed
          if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt update
              sudo apt install -y docker.io
          fi

          # Ensure Docker Compose is installed
          if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo apt install -y docker-compose
          fi

          # Stop and remove existing containers
          docker-compose down

          # Pull latest images
          docker-compose pull

          # Start new containers
          docker-compose up -d
        EOF

    - name: Navigate to the deployment directory
      working-directory: /home/ay/app 
      run: ls -l

    - name: Run Certbot to Obtain/Renew SSL Certificate
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          # Ensure Certbot volumes exist
          docker volume create certbot-etc || true
          docker volume create certbot-var || true

          docker run --rm -it \
            -v certbot-etc:/etc/letsencrypt \
            -v certbot-var:/var/lib/letsencrypt \
            certbot/certbot certonly --webroot \
            -w /var/www/certbot \
            -d gslsportal.com \
            --email ayomideolalere374@gmail.com \
            --agree-tos \
            --no-eff-email || echo "Certbot SSL renewal skipped (already valid)"

          # Restart Nginx to apply SSL certificate
          docker-compose restart nginx
        EOF


    